//
//  RegistationInteractor.swift
//  Netflix
//
//  Created by Admin on 8/19/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import FirebaseAuth
import FirebaseDatabase

protocol RegistationBusinessLogic {
    func doSomthing(request: Registation.ViewItemVisibility.Request)
    func checkUserFields(request: Registation.CheckData.Request)
    func createUser(request: Registation.UserData.Request)
    func sigInUser(request: Registation.SigInUser.Request)
}

protocol RegistationDataStore {
    var tag: Int! { get set }
}

class RegistationInteractor: RegistationBusinessLogic, RegistationDataStore {
 
    var presenter: RegistationPresentationLogic?
    var worker: RegistationWorker?
    var tag: Int!
    
    // MARK: Do something
    
    func doSomthing(request: Registation.ViewItemVisibility.Request) {
        var tagIdentifier: Int!
        request.tagId == nil ? (tagIdentifier = self.tag) : (tagIdentifier = request.tagId!)
        if tagIdentifier == 0 {
            let response = Registation.ViewItemVisibility.Response(visibility: true, id: tagIdentifier)
            presenter?.presentSomething(response: response)
        } else {
            let response = Registation.ViewItemVisibility.Response(visibility: false, id: tagIdentifier)
            presenter?.presentSomething(response: response)
        }
    }
    
    func checkUserFields(request: Registation.CheckData.Request) {
        worker = RegistationWorker()
        var message: Registation.ErrorMessage?
        switch false {
        case worker?.checkAllFieldsAreFill(request.registrationFormField):
            message = .allFieldError
        case worker?.checkEmailValidation(request.registrationFormField.email) :
            message = .emailError
        case worker?.checkPasswordValidation(request.registrationFormField.password) :
            message = .passwordError
        case worker?.confirmPassword(request.registrationFormField.password, request.registrationFormField.confirmedPassword) :
            message = .passowrdNotConfirmd
        default :
            break
        }
        let response = Registation.CheckData.Response(message: message)
        presenter?.presentUserRegistrationAlertMessage(response: response)
    }
    
    func sigInUser(request: Registation.SigInUser.Request) {
        worker = RegistationWorker()
        worker?.sigIn(request.detail, complition: { [weak self] error in
            let respons = Registation.SigInUser.Response(errorMessage: error)
            self?.presenter?.presentSignAlertMessage(response: respons)
        })
    }
    
    func createUser(request: Registation.UserData.Request) {
        worker = RegistationWorker()
        worker?.createUserDataOnFireBase(request.userInfo, complition: { [weak self] error in
            let response = Registation.UserData.Response(errorMessage: error)
            self?.presenter?.presentUserCreationAlertMessage(response: response)
        })
    }
    
}
