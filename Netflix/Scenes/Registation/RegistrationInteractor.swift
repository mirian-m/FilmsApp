//
//  RegistationInteractor.swift
//  Netflix
//
//  Created by Admin on 8/19/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import FirebaseAuth
import FirebaseDatabase

protocol RegistationBusinessLogic {
    func doSomthing(request: Registration.ViewItemVisibility.Request)
    func registraitUser(request: Registration.RegistraitUser.Request)
    func sigInUser(request: Registration.SigInUser.Request)
}

protocol RegistationDataStore {
    var tag: Int { get set }
}
final class RegistrationInteractor: RegistationDataStore {
    
    var presenter: RegistrationPresentationLogic?
    var worker: RegistrationWorker?
    var tag: Int = 0
}

extension RegistrationInteractor: RegistationBusinessLogic {

    // MARK:- RegistationBusinessLogic Metods
    func doSomthing(request: Registration.ViewItemVisibility.Request) {
        let tagIdentifier = (request.tagId == nil) ? self.tag :  request.tagId!
        let response = Registration.ViewItemVisibility.Response(visibility: tagIdentifier == 0, id: tagIdentifier)
        presenter?.presentSomething(response: response)
    }

    func sigInUser(request: Registration.SigInUser.Request) {
        worker = RegistrationWorker()
        worker?.sigIn(request.detail, complition: { [weak self] error in
            let respons = Registration.SigInUser.Response(errorMessage: error)
            self?.presenter?.presentSignMessage(response: respons)
        })
    }
    
    func registraitUser(request: Registration.RegistraitUser.Request) {
        worker = RegistrationWorker()
        let error = worker?.checkUserFields(userData: request.userInfo)
        guard error == nil else {
            presenter?.presentRegistrationMessage(response: Registration.RegistraitUser.Response(errorMessage: error?.rawValue))
            return
        }
        worker?.saveUserDataInDataBase(request.userInfo, complition: { [weak self] error in
            let response = Registration.RegistraitUser.Response(errorMessage: error)
            self?.presenter?.presentRegistrationMessage(response: response)
        })
    }
}
