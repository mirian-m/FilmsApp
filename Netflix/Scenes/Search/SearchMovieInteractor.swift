//
//  SearchMovieInteractor.swift
//  Netflix
//
//  Created by Admin on 9/5/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SearchMovieBusinessLogic {
    func getMovies(request: SearchMovie.GetMovies.Request)
    func tappedMovie(requset: SearchMovie.MovieDetail.Request)

}

protocol SearchMovieDataStore {
    var movieDetails: Details { get set }
}

class SearchMovieInteractor: SearchMovieBusinessLogic, SearchMovieDataStore {
    
    var presenter: SearchMoviePresentationLogic?
    var worker: APIWoker?
    var movieDetails: Details = Details()
    private var fetchedMovies = Movies(details: [])
    
    // MARK: Do something
    
    func getMovies(request: SearchMovie.GetMovies.Request) {
        worker = APIWoker()
        let url =  "\(APIConstants.baseURL)/3/discover/movie?api_key=\(APIConstants.API_Key)&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1&with_watch_monetization_types=flatrate"
        
        worker?.fetchMoviesDetails(url: url, completion: { [weak self] (result: Result<Movies, APICollerError>) in
            var response = SearchMovie.GetMovies.Response()
            switch result {
            case .success(let movies):
                self?.fetchedMovies = movies
                response.movies = movies
            case .failure(let error):
                response.error = error
            }
            self?.presenter?.presenMovies(response: response)
        })
    }
    
    func tappedMovie(requset: SearchMovie.MovieDetail.Request) {
        movieDetails = fetchedMovies.details.filter { $0.id! == requset.selectedMovieId }[0]
        presenter?.presentSelectedMovie(response: SearchMovie.MovieDetail.Response())
    }

}
