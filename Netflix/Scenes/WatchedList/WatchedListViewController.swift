//
//  WatchedListViewController.swift
//  Netflix
//
//  Created by Admin on 9/7/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol WatchedListDisplayLogic: AnyObject {
    func displayWatchedMovies(viewModel: WatchedList.GetWatchedMovies.ViewModel)
    func displaySelectedMovie(viewModel: WatchedList.GetSelectedMovie.ViewModel)
    
}

final class WatchedListViewController: BackgroundImageViewControlller {
    
    private lazy var watchedFilmTableView: UITableView = {
        var table = UITableView()
        table.register(WatchedFilmTableViewCell.self, forCellReuseIdentifier: WatchedFilmTableViewCell.identifier)
        table.dataSource = self
        table.delegate = self
        table.backgroundColor = .none
        view.addSubview(table)
        return table
    }()
    
    private var watchedListViewModel = [WatchedListViewModel]()
    
    var interactor: WatchedListBusinessLogic?
    var router: (NSObjectProtocol & WatchedListRoutingLogic & WatchedListDataPassing)?
    
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = WatchedListInteractor()
        let presenter = WatchedListPresenter()
        let router = WatchedListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        title = "Watched List"
        print("something")
        getWatchedMovies()
    }
    override func viewDidLayoutSubviews() {
        super .viewDidLayoutSubviews()
        watchedFilmTableView.frame = view.bounds
    }
    
    // MARK: Get Movies
    
    func getWatchedMovies() {
        let request = WatchedList.GetWatchedMovies.Request()
        interactor?.getWatchedMovies(request: request)
    }
    
}

extension WatchedListViewController: UITableViewDataSource, UITableViewDelegate {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        watchedListViewModel.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = tableView.dequeueReusableCell(withIdentifier: WatchedFilmTableViewCell.identifier, for: indexPath) as? WatchedFilmTableViewCell else { return UITableViewCell() }
        let movies = watchedListViewModel[indexPath.row]
        cell.configure(with: movies)
        return cell
    }
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
        interactor?.didTapMovie(requset: WatchedList.GetSelectedMovie.Request(selectedMovieId: watchedListViewModel[indexPath.row].id))
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat { Constans.heightForRow }
}

extension WatchedListViewController:  WatchedListDisplayLogic {
    func displaySelectedMovie(viewModel: WatchedList.GetSelectedMovie.ViewModel) {
        router?.routeToTrailerVC(segue: nil)
    }
    func displayWatchedMovies(viewModel: WatchedList.GetWatchedMovies.ViewModel) {
//        DispatchQueue.main.async { [weak self] in
            self.watchedListViewModel = viewModel.watchedMoviesModel
            self.watchedFilmTableView.reloadData()
//        }
    }
}
