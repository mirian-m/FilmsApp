//
//  MoviesCollectionViewController.swift
//  Netflix
//
//  Created by Admin on 8/29/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MoviesCollectionDisplayLogic: AnyObject {
    func displaySomething(viewModel: MoviesCollection.Something.ViewModel)
}

class MoviesCollectionViewController: UICollectionViewController, MoviesCollectionDisplayLogic {
    var interactor: MoviesCollectionBusinessLogic?
    var router: (NSObjectProtocol & MoviesCollectionRoutingLogic & MoviesCollectionDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        collectionView.register(MovieCollectionViewCell.self, forCellWithReuseIdentifier: "CollectionViewCell")
        let viewController = self
        let interactor = MoviesCollectionInteractor()
        let presenter = MoviesCollectionPresenter()
        let router = MoviesCollectionRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        doSomething()
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    func doSomething() {
        let request = MoviesCollection.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    func displaySomething(viewModel: MoviesCollection.Something.ViewModel) {
        //nameTextField.text = viewModel.name
    }
}

extension MoviesCollectionViewController {
    
//    func setScrollPosition(x: CGFloat) {
//        self.setContentOffset(CGPoint(x: x, y: 0), animated: false)
//    }
//
//    func getScrollPosition() -> CGFloat {
//        return self.contentOffset.x
//    }
    
    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return 3
    }
    
    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        guard let collectionView = collectionView.dequeueReusableCell(withReuseIdentifier: "CollectionViewCell", for: indexPath) as? MovieCollectionViewCell else { return UICollectionViewCell() }
        
//        guard let imageUrl = movies[indexPath.row].poster_path else { return UICollectionViewCell() }
//        let url = APIConstants.posterBaseURL + imageUrl
        
//        collectionView.loadImage(by: url)
        return collectionView
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize{
        return CGSize(width: 120, height: Constans.heightForRow)
    }
    
    override func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        collectionView.deselectItem(at: indexPath, animated: true)
//        let title = (movies[indexPath.row].original_title ?? movies[indexPath.row].title) ?? ""
//        let overview = movies[indexPath.row].overview
        
//        APIColler.shared.getMovie(with: title + "trailer") { result in
//            switch result {
//            case .success(let video):
//                self.delegat.collectionViewTableViewCellDidTap(cell: self, model: TrailerViewModel(movieTitle: title, overview: overview, youtubeId: video.items[0].id))
//            case .failure(let error):
//                print (error)
//            }
//        }
    }

}

