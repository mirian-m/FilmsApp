//
//  HomeViewController.swift
//  Netflix
//
//  Created by Admin on 8/22/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HomeDisplayLogic: AnyObject {
    func displayMovies(viewModel: Home.MovieInfo.ViewModel)
    func displayAlert(viewModel: Home.MovieInfo.ViewModel)
    func displaySelectedMovie(viewModel: Home.GetSelectedMovie.ViewModel)
}

final class HomeViewController: BackgroundImageViewControlller {
    
    //  MARK:- Clean Components
    var interactor: HomeBusinessLogic?
    var router: (NSObjectProtocol & HomeRoutingLogic & HomeDataPassing)?
    
    //  MARK: @IBOutlet
    @IBOutlet weak var personBtn: UIBarButtonItem! {
        didSet {
            personBtn.image = UIImage(systemName: "person")?.withRenderingMode(.alwaysOriginal).withTintColor(.white)
        }
    }
    @IBOutlet weak var filmTableView: UITableView!
    
    //  MARK:- Fields
    private var offsets = [IndexPath: CGFloat]()
    private let headerForSection = ["Trending movies", "Now playing", "Popular", "Upcoming movies", "Top"]
    private var headerView: Poster?
    private var posterIsSeted = false
    private var fetchedMoviesDetails: [MovieViewModel] = []
    
    
    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        controllerSetup()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(true)
    }
    
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = HomeInteractor()
        let presenter = HomePresenter()
        let router = HomeRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    private func controllerSetup() {
        tabBarController?.navigationItem.hidesBackButton = true
        tabBarController?.navigationController?.navigationBar.isHidden = false
        tabBarItem.badgeColor = .label
        tabBarItem.image = Constants.Design.Image.IconHome?.withRenderingMode(.automatic)
        tabBarItem.title = "Home"
        
        headerView = Poster(frame: CGRect(x: 0,
                                          y: 0,
                                          width: view.bounds.width,
                                          height: UIScreen.main.bounds.height * (2/3)))
        headerView?.postNotification()
        filmTableView.tableHeaderView = headerView
        setNavBarItem()
    }
    
    //  MARK:- Set Navigation Items
    private func setNavBarItem() {
        navigationController?.title = "Home"
        var image = UIImage(named: "Netflix-new")
        image = image?.withRenderingMode(.alwaysOriginal)
        
        tabBarController?.navigationItem.leftBarButtonItem  = UIBarButtonItem(image: image, style: .done, target: self, action: nil)
        tabBarController?.navigationItem.rightBarButtonItem =
            UIBarButtonItem(
                image: Constants.Design.Image.IconPerson?.withTintColor(.white, renderingMode: .alwaysOriginal),
                style: .done,
                target: self, action: #selector(presentProfile)
            )
        tabBarController?.navigationController?.navigationBar.tintColor = Constants.Design.Color.Primary.White
    }
    
    // MARK: Routing
    @objc private func presentProfile() {
        router?.routeToProfile(segue: nil)
    }
}

extension HomeViewController: UITableViewDataSource, UITableViewDelegate {
    
    //  MARK:- Tableview DataSource & Delegate Methods
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = tableView.dequeueReusableCell(withIdentifier: "MoviesTableViewCell", for: indexPath) as? MoviesTableViewCell else { return UITableViewCell() }
        
        cell.setScrollPosition(x: offsets[indexPath] ?? 0)
        
        let request = Home.MovieInfo.Request(section: indexPath.section)
        
        interactor?.fetchMovies(request: request, complition: { [weak self] done in
            if done {
                cell.updateViewFromModel(movies: self?.fetchedMoviesDetails ?? [])
            }
        })
        cell.delegate = self
        return cell
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        1
    }
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        Constants.Content.Category.Height.middle
    }
    func numberOfSections(in tableView: UITableView) -> Int {
        headerForSection.count
    }
    func tableView(_ tableView: UITableView, willDisplayHeaderView view: UIView, forSection section: Int) {
        guard let header = view as? UITableViewHeaderFooterView else { return }
        header.textLabel?.font = Constants.Design.Font.HeadingTwo
        header.textLabel?.frame = CGRect(x: header.bounds.origin.x, y: header.bounds.origin.y, width: 100, height: 50)
        header.textLabel?.textColor = Constants.Design.Color.Primary.White
        header.textLabel?.text = header.textLabel?.text?.upperCasedFirstLetter()
    }
    
    func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -> String? {
        headerForSection[section]
    }
    
    func tableView(_ tableView: UITableView, didEndDisplaying cell: UITableViewCell, forRowAt indexPath: IndexPath) {
        offsets[indexPath] = (cell as? MoviesTableViewCell)?.getScrollPosition()
    }
    
}

extension HomeViewController: HomeDisplayLogic {
    
    //  MARK:- DisplayLogic Functions
    func displayMovies(viewModel: Home.MovieInfo.ViewModel) {
        self.fetchedMoviesDetails = viewModel.moviesViewModel
        if !self.posterIsSeted {
            guard let randomMovie = viewModel.moviesViewModel.randomElement() else { return }
            self.headerView?.configure(with: randomMovie.imageUrl, buttonsIsHidden: true)
            self.posterIsSeted = true
        }
    }
    
    func displayAlert(viewModel: Home.MovieInfo.ViewModel) {
        showAlertWith(title: AlerTitle.Error.error, text: viewModel.error ?? "")
    }
    
    func displaySelectedMovie(viewModel: Home.GetSelectedMovie.ViewModel) {
        router?.routToDetailsVc(segue: nil)
    }
}

extension HomeViewController: CollectionViewTableViewCelldelegate, ProfileViewControllerDelegate {
    
    //  MARK: Delegate Protocol FUNCtions
    func collectionViewTableViewCellDidTap(movieId: Int) {
        interactor?.didTapMovie(requset: Home.GetSelectedMovie.Request(selectedMovieId: movieId))
    }
    
    func backToRootViewController() {
        router?.routeToWelcomePage(segue: nil)
    }
}

//  MARK:- Aler Func
extension HomeViewController  {
    private func showAlertWith(title: String, text: String) {
        let alert = UIAlertController(title: title, message: "\n\(text)", preferredStyle: .alert)
        let action = UIAlertAction(title: "Ok", style: .cancel, handler: nil)
        alert.addAction(action)
        alert.view.tintColor = .red
        present(alert, animated: true, completion: nil)
    }
}
