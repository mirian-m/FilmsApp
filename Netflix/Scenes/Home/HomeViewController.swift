//
//  HomeViewController.swift
//  Netflix
//
//  Created by Admin on 8/22/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit


protocol HomeDisplayLogic: AnyObject {
    func displayMovies(viewModel: Home.MovieInfo.ViewModel)
    func displaySelectedMovie(viewModel: Home.MovieDetail.ViewModel)
}

class HomeViewController: BackgroundImageViewControlller, HomeDisplayLogic, CollectionViewTableViewCelldelegat, ProfileViewControllerDelegate {
    
    
    //  MARK: @IBOutlet
    @IBOutlet weak var personBtn: UIBarButtonItem! {
        didSet {
            personBtn.image = UIImage(systemName: "person")?.withRenderingMode(.alwaysOriginal).withTintColor(.white)
        }
    }
    
    @IBOutlet weak var filmTableView: UITableView!
    
    var interactor: HomeBusinessLogic?
    var router: (NSObjectProtocol & HomeRoutingLogic & HomeDataPassing)?
    var offsets = [IndexPath: CGFloat]()
    
    private let headerForSection = ["Trending movies", "Trending tv", "Popular", "Upcoming movies", "Top"]
    private var headerView: Poster?
    private var posterIsSeted = false
    private var fetchedMoviesDetails: [MovieViewModel] = []
    private var isNavigate: Bool = false
    
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        controllerSetup()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        navigationController?.setNavigationBarHidden(false, animated: false)
        isNavigate = false
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(true)
        if !isNavigate {
            navigationController?.setNavigationBarHidden(true, animated: false)
        }
    }
    
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = HomeInteractor()
        let presenter = HomePresenter()
        let router = HomeRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    private func controllerSetup() {
        tabBarController?.navigationController?.navigationBar.isHidden = false
//                self.tabBarController?.navigationItem.hidesBackButton = true

        tabBarItem.badgeColor = .label
        tabBarItem.image = UIImage(systemName: "house.fill")
        tabBarItem.title = "Home"
        
        headerView = Poster(frame: CGRect(x: 0,
                                          y: 0,
                                          width: view.bounds.width,
                                          height: UIScreen.main.bounds.height * (2/3)))
        filmTableView.tableHeaderView = headerView
        setNavBarItem()
    }
    
    //    MARK:- Navigation Item Set Func
    
    private func setNavBarItem() {
        title = "Home"
        var image = UIImage(named: "Netflix-new")
        image = image?.withRenderingMode(.alwaysOriginal)
        
        tabBarController?.navigationItem.leftBarButtonItem  = UIBarButtonItem(image: image, style: .done, target: self, action: nil)
        tabBarController?.navigationItem.rightBarButtonItems = [
            UIBarButtonItem(image: UIImage(systemName: "person")?
                                .withTintColor(UIColor(named: "CustomColor")!,
                                               renderingMode: .alwaysOriginal),
                            style: .done, target: self, action: #selector(presentProfile)),
            
//            UIBarButtonItem(image: UIImage(systemName: "play.rectangle")?
//                                .withTintColor(UIColor(named: "CustomColor")!,
//                                               renderingMode: .alwaysOriginal), style: .done, target: self, action: nil)
        ]
        tabBarController?.navigationController?.navigationBar.tintColor = .white
    }
    
    // MARK: Routing
    
    @objc private func presentProfile() {
        router?.routeToProfile(segue: nil)
    }
    
    func displayMovies(viewModel: Home.MovieInfo.ViewModel) {
        let movies = viewModel.moviesViewModel
        self.fetchedMoviesDetails = movies
        DispatchQueue.main.async { [weak self] in
            if !self!.posterIsSeted {
                guard let randomPosterUrl = viewModel.moviesViewModel.randomElement()?.imageUrl else { return }
                self?.headerView?.configure(with: randomPosterUrl)
                self?.posterIsSeted = true
            }
        }
    }
    func displaySelectedMovie(viewModel: Home.MovieDetail.ViewModel) {
        self.isNavigate = true
        router?.routToTrailerVc(segue: nil)
    }
    
}

extension HomeViewController: UITableViewDataSource, UITableViewDelegate {
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = tableView.dequeueReusableCell(withIdentifier: "MoviesTableViewCell", for: indexPath) as? MoviesTableViewCell else { return UITableViewCell() }
        
        cell.setScrollPosition(x: offsets[indexPath] ?? 0)
        let title = headerForSection[indexPath.section]
        let url = API.dictionariOfAPI[title]!
        let request = Home.MovieInfo.Request(url: url)
        
        interactor?.fetchMovies(request: request, complition: { [weak self] done in
            if done {
                cell.updateViewFromModel(movies: self!.fetchedMoviesDetails)
            }
        })
        cell.delegat = self
        return cell
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        1
    }
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        Constans.heightForRow
    }
    func numberOfSections(in tableView: UITableView) -> Int {
        headerForSection.count
    }
    func tableView(_ tableView: UITableView, willDisplayHeaderView view: UIView, forSection section: Int) {
        guard let header = view as? UITableViewHeaderFooterView else { return }
        header.textLabel?.font = .systemFont(ofSize: 18, weight: .semibold)
        header.textLabel?.frame = CGRect(x: header.bounds.origin.x, y: header.bounds.origin.y, width: 100, height: 50)
        header.textLabel?.textColor = .white
        header.textLabel?.text = header.textLabel?.text?.upperCasedFirstLetter()
    }
    
    func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -> String? {
        headerForSection[section]
    }
    
    // MARK: PROTOCOL FUNC
    
    func collectionViewTableViewCellDidTap(movieId: Int) {
        interactor?.didTapMovie(requset: Home.MovieDetail.Request(selectedMovieId: movieId))
    }

    func backToRootViewController() {
        router?.routeToWelcomePage(segue: nil)
    }
}
