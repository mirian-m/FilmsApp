//
//  DetailsInteractor.swift
//  Netflix
//
//  Created by Admin on 9/8/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import FirebaseAuth

protocol DetailsBusinessLogic {
    func getMoveDetails(request: Details.GetMovie.Request)
    func updateUserWatchedList(request: Details.UpdateUserData.Request)
}

protocol DetailsDataStore {
    var movieId: Int { get set }
    var movieDetails: MovieDetails { get set }
}

class DetailsInteractor: DetailsDataStore {
    var movieDetails: MovieDetails = MovieDetails()
    var movieId: Int = 0
    var presenter: DetailsPresentationLogic?
    var worker: APIWoker?
    
    // MARK: Do something
}

extension DetailsInteractor: DetailsBusinessLogic {
    func updateUserWatchedList(request: Details.UpdateUserData.Request) {
        //  FIXME: - Fix logic
        UserManger.shared.getSigInUserData { data in
            var listOfMovies = data.seenMoviesList
            listOfMovies.append(request.movieId)
            listOfMovies = Array(Set(listOfMovies))
            guard let user = Auth.auth().currentUser else { return }
            UserManger.shared.updateUserData(userId:  user.uid, data: [Constants.API.FireBase.Key.WatchedMovies: listOfMovies]) { (error) in
                //  TODO:- ERRor
            }
        }
    }
    func getMoveDetails(request: Details.GetMovie.Request) {
        worker = APIWoker()
        var response = Details.GetMovie.Response()
        
        worker?.getMovie(by: movieId, complition: { (result: Result<MovieDetails, APICollerError>) in
            DispatchQueue.main.async { [weak self] in
                switch result {
                case .success(let movieDetails):
                    response.movie = movieDetails
                    self?.movieDetails = movieDetails
                case .failure(let error):
                    response.error = error
                }
                self?.presenter?.presentMovieDetails(response: response)
            }
        })
    }
}
