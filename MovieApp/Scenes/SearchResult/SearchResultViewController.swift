//
//  SearchResultViewController.swift
//  Netflix
//
//  Created by Admin on 9/5/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SearchResultDisplayLogic: AnyObject {
    func displaySearchResult(viewModel: SearchResult.GetSearchResult.ViewModel)
    func displaySelectedMovie(viewModel: SearchResult.GetSelectedMovie.ViewModel)
}

final class SearchResultViewController: BackgroundViewControlller {
    
    //   MARK:- Clean Components
    var interactor: SearchResultBusinessLogic?
    var router: (NSObjectProtocol & SearchResultRoutingLogic & SearchResultDataPassing)?
    
    
    private lazy var searchResultCollectionView: UICollectionView = {
        let layout = UICollectionViewFlowLayout()
        layout.itemSize = CGSize(width: UIScreen.main.bounds.width / 3 - 10, height: Constants.Content.Category.Height.middle)
        layout.minimumInteritemSpacing = 0
        let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)
        collectionView.register(SearchCollectionViewcell.self, forCellWithReuseIdentifier: SearchCollectionViewcell.identifier)
        collectionView.dataSource = self
        collectionView.delegate = self
        collectionView.frame = view.bounds
        view.addSubview(collectionView)
        return collectionView
    }()
    
    private var moviesViewModel: [MovieViewModel] = []
    
    var searchResultIsUpdated: Bool = false {
        didSet {
            getSearchResult()
            searchResultCollectionView.reloadData()
        }
    }
    
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = SearchResultInteractor()
        let presenter = SearchResultPresenter()
        let router = SearchResultRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    //  MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
    }
    
    //  MARK: Get Search Result
    private func getSearchResult() {
        let request = SearchResult.GetSearchResult.Request()
        interactor?.getSearchResult(request: request)
    }
}

extension SearchResultViewController: UICollectionViewDataSource, UICollectionViewDelegate {
    
    //  MARK:- CollectionView DataSource & Delegate Functions
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int { moviesViewModel.count }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: SearchCollectionViewcell.identifier, for: indexPath) as? SearchCollectionViewcell else { return UICollectionViewCell() }
        let posterURL = Constants.API.Movies.Helper.PosterBaseURL + (moviesViewModel[indexPath.row].imageUrl)
        cell.configure(by: posterURL)
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        collectionView.deselectItem(at: indexPath, animated: true)
        interactor?.didTapMovie(requset: SearchResult.GetSelectedMovie.Request(selectedMovieId: moviesViewModel[indexPath.row].id))
    }
}

//  MARK:- Display logic Protocol Functions
extension SearchResultViewController: SearchResultDisplayLogic  {
    func displaySearchResult(viewModel: SearchResult.GetSearchResult.ViewModel) {
        self.moviesViewModel = viewModel.movieViewModel
    }
    
    func displaySelectedMovie(viewModel: SearchResult.GetSelectedMovie.ViewModel) {
        router?.routeToDetailsVc(segue: nil)
    }
    
}
