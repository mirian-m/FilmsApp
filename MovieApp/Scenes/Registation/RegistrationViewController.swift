//
//  RegistationViewController.swift
//  Netflix
//
//  Created by Admin on 8/19/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol RegistrationDisplayLogic: AnyObject {
    func displayView(viewModel: Registration.ViewItemVisibility.ViewModel)
    func displayAlert(viewModel: Registration.GetError.ViewModel)
    func displayHome(viewModel: Registration.SigInUser.ViewModel)
}

final class RegistrationViewController: BackgroundViewControlller {
    
    //  MARK:- Clean Components
    var interactor: RegistationBusinessLogic?
    var router: (NSObjectProtocol & RegistationRoutingLogic & RegistrationDataPassing)?
    
    static var identifier: String { .init(describing: self) }
    
    //  MARK:- Fields
   private lazy var contentView = RegistrationView(frame: CGRect(x: 0, y: 0, width: self.view.frame.width, height: self.view.frame.height))
    
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        navigationController?.navigationBar.isHidden = true
        view.addSubview(contentView)
        addTargetsFunc()
        getView()
    }
    
    //  MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = RegistrationInteractor()
        let presenter = RegistrationPresenter()
        let router = RegistationRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    private func addTargetsFunc() {
        contentView.segmentControl.addTarget(self, action: #selector(setup(_ :)), for: .valueChanged)
        contentView.button.addTarget(self, action: #selector(goToMainPageOfUser), for: .touchUpInside)
    }
    
    @objc private func setup(_ sender: UISegmentedControl) {
        contentView.segmentControl.isSelected = true
        getView()
    }
    
    @objc private func goToMainPageOfUser(_ sender: UIButton) {
        contentView.button.isEnabled = false
        contentView.button.alpha = 0.5
        contentView.activityIndicator.startAnimating()
        switch sender.tag {
        case 0:
            interactor?.sigInUser(
                request: Registration.SigInUser.Request(
                    detail: Registration.SignInDetail(
                        email: contentView.emailTextField.text ?? "",
                        password: contentView.passwordTextField.text ?? "")))
        case 1:
            let userData = UserData(
                firstName: contentView.firstNameTextField.text ?? "",
                lastName: contentView.lastNameTextField.text ?? "",
                email: contentView.emailTextField.text ?? "",
                password: contentView.passwordTextField.text ?? "",
                confirmedPassword: contentView.confirmPasswordTextField.text ?? "",
                profileImageUrl: "",
                seenMoviesList: []
            )
            interactor?.registraitUser(request: Registration.RegistraitUser.Request(userInfo: userData))
        default:
            break
        }
    }
}

extension RegistrationViewController: RegistrationDisplayLogic {
    
    //  MARK: DisplayLogic Methods
    func displayView(viewModel: Registration.ViewItemVisibility.ViewModel) {
        configureView(with: viewModel.viewModel)
        displaViewWithAnimation()
    }
    
    func displayAlert(viewModel: Registration.GetError.ViewModel) {
        contentView.button.isEnabled = true
        contentView.button.alpha = 1
        contentView.activityIndicator.stopAnimating()
        showAlertWith(title: viewModel.errorModel.title, text: viewModel.errorModel.message)
    }
    
    func displayHome(viewModel: Registration.SigInUser.ViewModel) {
        router?.routeToHomeVC()
    }
}

//  MARK:- Private functions of RegistrationViewController
extension RegistrationViewController {
    
    //  MARK: Do something
    private func getView() {
        let tagId = contentView.segmentControl.isSelected ? contentView.segmentControl.selectedSegmentIndex : nil
        let request = Registration.ViewItemVisibility.Request(tagId: tagId)
        interactor?.doSomthing(request: request)
    }
    
    //  MARK:- Display RegistrationViewController's View with animation
    private func displaViewWithAnimation() {
        clearTextFields()
        UIView.animate(withDuration: 1.5) { [weak self] in
            self?.contentView.regitrationStackView.center.x = -self!.view.frame.width
            self?.contentView.button.alpha = 0
            self?.view.addSubview(self!.contentView)
            self?.contentView.button.alpha = 1
        }
    }
    
    //  MARK:- Clear all textfields content
    private func clearTextFields() {
        contentView.firstNameTextField.text = ""
        contentView.emailTextField.text = ""
        contentView.passwordTextField.text = ""
        contentView.confirmPasswordTextField.text = ""
    }

    //  MARK:- Configuretion of ViewController's View dependent on viewModel
    private func configureView(with viewModel: RegistrationViewModel) {
        contentView.lastNameTextField.isHidden = viewModel.textFieldVisibility
        contentView.firstNameTextField.isHidden = viewModel.textFieldVisibility
        contentView.confirmPasswordTextField.isHidden = viewModel.textFieldVisibility
        contentView.button.tag = viewModel.selectedSegmentId
        contentView.segmentControl.selectedSegmentIndex = viewModel.selectedSegmentId
        let title = contentView.segmentControl.titleForSegment(at: contentView.segmentControl.selectedSegmentIndex)
        contentView.button.setTitle(title, for: .normal)
    }
}
